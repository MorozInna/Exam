/* БІЛЕТ 3
Області доступу змінних. Статичні змінні. Специфікатори змінних на Сі.
Напишіть програму, що використовує статичні змінні для підрахунку скільки разів
в головній програмі викликана деяка програмна функція  f(). */


/* Область доступу змінних - це ділянка програмного коду, де визначена змінна існує та
за межами якої змінні не може бути викликана (використана).

Типи областей доступу змінних:

Локальні змінні - це змінні що створюються/визначаються/присвоюються всередині функції або блоку програми (тобто
в ділянці, що обмежена фігурними дужками).

Наприклад:
 void test();
 int main()
 {
 int m = 22, n = 44;
 printf("\nValues 1 : m = %d and n = %d ", m, n);
 test();
 }
 void test()
 {
 int a = 50, b = 80;
 printf("\nValues 2 : a = %d and b = %d", a, b);
 }

Результат:
 Values 1 : m = 22 and n = 44 Values 2 : a = 50 and b = 80


Глобальні змінні - це змінні, які описані поза всіма функціями, тобто на початку програми.
До глобальних змінних можна звернутися з будь-якої функції та блока.

Наприклад:
 void test();
 int m = 2, n = 4;
 int a = 5, b = 8;
 int main()
 {
 printf("All variables are accessed from main function:");
 printf("\nm=%d:n=%d:a=%d:b=%d", m,n,a,b);
 test();
 }
 void test()
 {
 printf("\n\nAll variables are accessed from test function:");
 printf("\nm=%d:n=%d:a=%d:b=%d", m,n,a,b);
 }

Результат:
 All variables are accessed from main function:
 m = 2 : n = 4 : a = 5 : b = 8
 All variables are accessed from test function:
 m = 2 : n = 4 : a = 5 : b = 8

Формальні параметри - в якості аргументів в визначенні функції.

Специфікатори змінних.
В мові Сі та Сі++ перед типом змінної при її визначенні може стояти специфікатор або специфікатори, що
визначають або область дії змінної або особливості її зберігання в пам‘яті комп‘ютера. Їх ділять на два типи:
специфікатори зберігання та специфікатори дії. Статична змінна схожа на глобальну, але діє тільки у тій функції,
в якій вона оголошена.
Іноді буває важко визначити тип виразу. І згідно з останніми стандартами можна надати компілятору самому
виводити тип об'єкта. І для цього застосовується специфікатор auto. При цьому, якщо ми визначаємо змінну зі
специфікатором auto, ця змінна повинна бути обов'язково ініціалізована будь-яким значенням.

static – застосовується як для локальних, так і для глобальних змінних. Область видимості локальної статичної
змінної зберігається після виходу з блока чи функції, де ця змінна оголошена. Під час повторного виклику функції змінна
зберігає своє попереднє значення. Цей специфікатор потрібен при необхідності збереження значень які підраховує
функція для їх врахування при наступному виклику функції. Наприклад це використовується для підрахунку виклику
функцій чи при створенні випадкових чисел щоб не було повторень значень при новому виклику функції. Тоді їх треба
описати як статичні за допомогою службового слова static.

Наприклад:
 static int х, у;
 static float р = 9.65; */

#include <iostream>

using namespace std;

class f
{
public:

	static int call;

	f(int x, int y)
	{
		cout << "x + y = " << x + y << endl;
		call++;
	}
};

int f::call = 0;

int main()
{
	f f1(1, 3);
	f f2(4, 6);
	f f3(7, 11);
	cout << "The number of calls to the program function: " << f::call << endl; // виводить кількість викликів
}
